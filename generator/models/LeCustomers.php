<?php

namespace generator\models;

use framework\db\ActiveRecord;
use Yii;

/**
 * User model
 * @property integer $entity_id
 * @property string $username
 * @property integer $province
 * @property integer $city
 * @property integer $phone
 * @property integer $district
 * @property integer $area_id
 * @property string $address
 * @property string $detail_address
 * @property string $store_name
 * @property string $storekeeper
 * @property string $store_area
 * @property string $lat
 * @property string $lng
 * @property string $img_lat
 * @property string $img_lng
 * @property string $password_reset_token
 * @property string $email
 * @property string $contractor
 * @property string $auth_token
 * @property float $orders_total_price
 * @property integer $status
 * @property integer $type
 * @property integer $level
 * @property integer $contractor_id
 * @property string $created_at
 * @property string $updated_at
 * @property string $apply_at
 * @property integer $first_order_id
 * @property string $first_order_at
 * @property string $business_license_img
 * @property string $store_front_img
 * @property string $password write-only password
 * @property string $new_password
 * @property float $balance
 * @property float $business_license_no
 * @property string $last_visited_at
 * @property string $last_place_order_at
 * @property string $storekeeper_instore_times
 * @property integer $last_place_order_id
 * @property float $last_place_order_total
 * @property integer $state
 * @property string $review_results
 * @property integer $is_login_white_list
 * @property integer $refresh_auth_token
 * @property integer $reject_count
 * @property integer $tag_id
 *
 */
class LeCustomers extends ActiveRecord
{
    const STATUS_DELETED = 0;
    const STATUS_ACTIVE = 10;

    const STATUS_UNCHECKED = 0;
    const STATUS_PASSED = 1;
    const STATUS_NOT_PASSED = 2;

    /**
     * 不重新生成token
     */
    const REFRESH_AUTH_TOKEN_NO = 0;

    /**
     * 重新生成token
     */
    const REFRESH_AUTH_TOKEN_YES = 1;
    /**
     * 默认状态
     */
    const STATE_PENDING = 0;
    /**
     * 待客服审核
     */
    const STATE_PENDING_REVIEW = 1;
    /**
     * 人工审核通过
     */
    const STATE_MANUAL_APPROVED = 2;
    /**
     * 人工审核不通过
     */
    const STATE_MANUAL_DISAPPROVED = 3;
    /**
     * 系统审核通过
     */
    const STATE_AUTOMATIC_APPROVED = 4;

    protected $customer_style = 0;
    protected $days = [];

    /**
     * @return object|\yii\db\Connection the database connection used by this AR class.
     */
    public static function getDb()
    {
        return Yii::$app->get('customerDb');
    }


    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'le_customers';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            ['phone', 'required'],
        ];
    }

    /**
     * Validates password
     *
     * @param string $password password to validate
     * @return boolean if password provided is valid for current user
     */
    public function validatePassword($password)
    {
        return Yii::$app->security->validatePassword($password, $this->password);
    }

    /**
     * Generates password hash from password and sets it to the model
     *
     * @param string $password
     */
    public function setPassword($password)
    {
        $this->password = Yii::$app->security->generatePasswordHash($password);
    }


    /**
     * Generates new password reset token
     */
    public function generatePasswordResetToken()
    {
        $this->password_reset_token = Yii::$app->security->generateRandomString() . '_' . time();
    }

    /**
     * Removes password reset token
     */
    public function removePasswordResetToken()
    {
        $this->password_reset_token = null;
    }

    public function beforeSave($insert)
    {
        if (!$this->state) {
            $this->state = self::STATE_PENDING_REVIEW;
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * @return array
     */
    public function getDays()
    {
        return $this->days;
    }

    /**
     * @param array $days
     */
    public function setDays($days)
    {
        $this->days = $days;
    }

    public function addDay($day)
    {
        if (!$this->testDay($day)) {
            throw new \Exception('非法的日期：' . $day);
        }
        $this->days[] = $day;
    }

    /**
     * 测试该用户是否能用于下单
     * @param $day
     * @return bool
     */
    public function testDay($day)
    {
        $weekNum = intval(date('W', strtotime($day)));
        $dayCounter = 0;
        $weekCounter = 0;
        foreach ($this->days as $value) {
            if ($value == $day) {
                //同一天,直接跳出
                $dayCounter += 1;
                break;
            }
            $_weekNum = intval(date('W', strtotime($value)));
            if ($_weekNum == $weekNum) {
                //同一周，计数
                $weekCounter += 1;
            }
        }

        if ($dayCounter > 0) {
            return false;
        }
        if ($this->city == 440200) {
            if ($weekCounter >= 4) {
                return false;
            }
        } else {
            if ($weekCounter >= 3) {
                return false;
            }
        }

        return true;
    }
}
